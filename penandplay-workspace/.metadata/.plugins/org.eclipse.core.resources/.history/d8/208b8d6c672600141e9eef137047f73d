//TODO on surface changed update display size 

package com.penandplay;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;

import com.penandplay.BitmapManager;

import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.Intent;
import android.content.res.Configuration;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Point;
import android.media.MediaPlayer;
import android.media.MediaPlayer.OnPreparedListener;
import android.os.Bundle;
import android.os.Debug;
import android.os.Environment;
import android.os.Handler;
import android.util.Log;
import android.view.Display;
import android.view.MotionEvent;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnTouchListener;
import android.view.animation.Animation;
import android.view.animation.AnimationUtils;
import android.view.animation.RotateAnimation;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.MediaController;
//TODO concurrent modificatio exception on back pressed
//TODO wheel not turning the first run
public class DisplaySequenceActivity extends Activity implements SurfaceHolder.Callback, OnTouchListener, OnPreparedListener{
		
	private static int timer =0;
	private static int canvas_h;
	private static int canvas_w;
	private final static Object timerlock=new Object();
	public final static Object pauselock=new Object();
	public final static Object uploadlock=new Object();
	
	public static double fps = 12;
	//public double interval;
	public int hide_time = 3; //seconds to hide controls
	public int timerLimit=(int)Math.round(hide_time*fps);
	public int new_hide_time = 7;
	
	//private static ScreenUpdater upd;
	private static final String TAG = "DisplaySequence";
	private File[] ordered_files;
	int width;
	int height;
	//public String fileName;
	public float framerate;
	private Thread t = null;
	//private Thread et = null;
	private static VideoEncoder encoder;

	private ImageButton playButton;
	private ImageButton photoButton;
	private ImageButton uploadButton;
	private ImageButton settingsButton;
	private OnClickListener playListener;
	private OnClickListener uploadListener;
	private OnClickListener photoListener;
	private OnClickListener settingsListener;
	private static boolean paused=false;
	private static boolean hidden=false;
	private static boolean first=true;
	private static boolean video_ready=false;
	private static String videofile;
	private boolean next_layer=true;
	private boolean no_new_images=false;
	private HashMap<Integer,ArrayList<String>> allgroups; 
	private BitmapManager  btmpass;
	private  String batchnr;
	private static boolean video_playing = false;
	private MediaPlayer mMediaPlayer;
	private MediaController mcontroller;
	
	private Animation hanim;
	private Animation uhanim;
	private RotateAnimation ranim;
	
	private final Handler handler = new Handler();
	private ExecutorService executor; 
	
	private SurfaceView sSurfaceView;
	private SurfaceHolder sHolder;
	public Canvas canvas;	
	 Paint paint;
	 public static String session = Environment.getExternalStorageDirectory().getPath() + File.separator + "Pen_and_play" + File.separator + "session" + File.separator;
	

		
		public boolean running = false;
	 
	 
	 public DisplaySequenceActivity() {
	    	    }
	 
	    /** Called when the activity is first created. */
	    @SuppressLint("NewApi")
		@Override
	    public void onCreate(Bundle savedInstanceState) {	
			
			paint= new Paint(Paint.FILTER_BITMAP_FLAG |
			                    Paint.DITHER_FLAG |
			                    Paint.ANTI_ALIAS_FLAG);
		        Log.d(TAG, "new " + this.getClass());
	    	
	       	super.onCreate(savedInstanceState);
	     

	    	
	    	btmpass = BitmapManager.getInstance();
	      	
	      	
	      	
	    	executor = Executors.newFixedThreadPool(1);
	    	//bitmaps=new ArrayList<ArrayList<Bitmap>>();
	    	//bitmapArray = new ArrayList<Bitmap>();
	    	
	    	//open xmls and save to sd card for native access 
	    	Log.d(TAG, "display sequence activity created ");

	    	setContentView(R.layout.sequence_view);
	        Log.d(TAG, "set content view");

	    	
	    	sSurfaceView = (SurfaceView)findViewById(R.id.sequence);
	    	sSurfaceView.setDrawingCacheEnabled(true);
	    	Log.d(TAG, "sequence layout set " + this.getClass());

	    	sHolder = sSurfaceView.getHolder();
			Log.d(TAG, "Surface Holder instantiated");
		    sHolder.addCallback(this);
		    Log.d(TAG, "Surface Holder Callback set");
		    sSurfaceView.setOnTouchListener(this); 

		     //TODO encode only if more photos added
	    	//upd = new ScreenUpdater();


		    
		    playButton=(ImageButton)findViewById(R.id.play_button);
	        photoButton=(ImageButton)findViewById(R.id.photo_button);
	        uploadButton=(ImageButton)findViewById(R.id.upload_button);
	        settingsButton=(ImageButton)findViewById(R.id.settings_button);
	        hanim = AnimationUtils.loadAnimation(getBaseContext(), R.anim.hidecontrols);
	        uhanim = AnimationUtils.loadAnimation(getBaseContext(), R.anim.unhidecontrols);
	        ranim = (RotateAnimation)AnimationUtils.loadAnimation(getBaseContext(), R.anim.rotate);
	        //ranim = new RotateAnimation(0, 360,Animation.RELATIVE_TO_SELF,0.5f,Animation.RELATIVE_TO_SELF,0.5f);
	        /*
	        ranim.setStartOffset(0);
	        ranim.setDuration(1000);
	        ranim.setFillAfter(true);
    		ranim.setRepeatMode(Animation.INFINITE);
*/
    		mMediaPlayer = new MediaPlayer();	
			mMediaPlayer.setOnPreparedListener(this);

	        playListener = new OnClickListener(){
	            public void onClick(View v)
	            {   if (paused){//TODO play pause 
	            	 	paused=false;
	            	 	if(video_ready){
	            	 		video_playing=true;
	            	        mMediaPlayer.start();
	            	 	}
	            	 	Log.d(TAG, "playing ");
	            		playButton.setImageResource(R.drawable.ic_pause);
	            		
	            		synchronized(pauselock){
		            	 	Log.d(TAG, "notifying ");

		            	 	pauselock.notify();
	            			Log.d(TAG, "notified ");
	            		}
	            		timerLimit=(int)Math.round(hide_time*fps);
	            		first=true;
	            		synchronized(timerlock){timer=0;}	
	            	}else{
	            		mMediaPlayer.pause();
	            	 	paused=true;
	            	 	video_playing=false;
	            	 	Log.d(TAG, "button paused ");
	            		playButton.setImageResource(R.drawable.ic_play);
	            		
	            	}
	            	
	            }
	        };
	        
	        uploadListener = new OnClickListener(){
	            public void onClick(View v)
	            { 
	            	synchronized(uploadlock){
	            		
	            		        		
	            	}
	            	//ranim.setRepeatMode(Animation.INFINITE);
            		//uploadButton.clearAnimation();
	         		uploadButton.setImageResource(R.drawable.ic_running);
            	    uploadButton.startAnimation(ranim);
        		    uploadButton.setOnClickListener(null);
        		    
	       	            Log.d(TAG, "starting encoder NOT");
	       		    	
	       		    /*	//  future= executor.submit(encoder);
	       		     try {
	       		      // videofile = (String) future.get(); // use future
	       		     } catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} catch (ExecutionException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} finally{
*/
	       		    	
	       		    	//uploadButton.clearAnimation();
	       		   		uploadButton.setOnClickListener(this);
	       				
	       		    // }
	            }
	        };
	        
	        
	       photoListener = new OnClickListener(){
	            public void onClick(View v) 
	            {      		photoButton.setOnClickListener(null);
	            			Intent capture_intent = new Intent(getBaseContext(), PhotoActivity.class);
	            			if(next_layer){
	            				capture_intent.putExtra("nextlayer","CUTOUT");
	            			}else{
	            				capture_intent.putExtra("nextlayer","OPAQUE");
	            			}
	                    	capture_intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);

	            			setResult(RESULT_OK,capture_intent);
	            			
	            			//startActivity(capture_intent);
	            			finish();
	            			   
	            			}
	        };
	        
	        photoButton.setOnClickListener(photoListener); 
	        playButton.setOnClickListener(null); 
	        uploadButton.setOnClickListener(null);
	        playButton.setAnimation(ranim);
	        video_playing=false;
			
	        
		    
	    	Intent intent = getIntent(); // gets the previously created intent
	        try{
	        	batchnr = intent.getStringExtra("this_batch");
	        }catch(NullPointerException e){
	        	Log.d(TAG, "no images, just replaying ");
	        	no_new_images = true;
	        }
	        no_new_images = false;
	        Log.d(TAG, "batch of images: " + batchnr);
	        
	      

	
		        
		        
	    }
	     
	    @SuppressLint("NewApi")
		
		@Override
	    public void onStart()
	    {   super.onStart();
    		Log.d(TAG, "onStart Called" );	    
    	
	        
	    }
	
	    @Override
	    public void onBackPressed() {	    	
	    	    super.onBackPressed();
	    	    Integer last_group = null;
	    	    for (Integer key : allgroups.keySet()){
	    	    		    	  last_group=key;  	
	    	    }
	    	    btmpass.removeGroup(last_group);
	    	    
	            Intent capture_intent = new Intent(getBaseContext(), PhotoActivity.class);
	        	capture_intent.putExtra("nextlayer","QUIT");
				setResult(RESULT_OK,capture_intent);
	            finish();
	    }
	    
	    @Override
	    public void onResume()
	    {   super.onResume();
	    	Log.d(TAG, "onResume Called" );
	    	paused=false;
	    	/*
	    	t = new Thread(upd);
	    	upd.running = true;
		    t.start();*/
		    
	    }
	    @Override
	    public void onPause()
	    {
	    	super.onPause();
	      	Log.d(TAG,"onPause event");
	      	paused=true;
	      	/*
	     	upd.running = false;
	      	Log.d(TAG,"running false"); 
	      	if(t == null){
	    	while(true){
	    		try{
	    			t.join();
	    		}catch(InterruptedException e){
	    			e.printStackTrace();
	    		}break;
	    	}

		    t = null;
	      	}*/
		    Log.d(TAG,"paused"); 
	    }
	    
	    @Override
	    public void onDestroy() {	        
	        super.onDestroy();
	      	Log.d(TAG,"onDestroy event"); 
	     	//upd.running = false;
	    /*  	Log.d(TAG,"set running false"); 
	      	if(t == null){
	    	while(true){
	    		try{
	    			t.join();
	    		}catch(InterruptedException e){
	    			e.printStackTrace();
	    		}break;
	    	}

		    t = null;
	      	}
		    Log.d(TAG,"paused"); */
		    
	    }

	 

		@Override
		public void surfaceChanged(SurfaceHolder holder, int format, int width,int height) {
			// TODO Auto-generated method stub			
		}

		@Override
		public void surfaceCreated(SurfaceHolder holder) {
			Log.d(TAG,"Surface created");
			

	    	//t = new Thread(upd);
	    	//upd.running = true;
		    //t.start();
			/*while(true){
	    		try{
	    			t.join();
	    		}catch(InterruptedException e){
	    			e.printStackTrace();
	    		}break;
	    	}
			Log.d(TAG,"Starting video");*/
			encodeVideo();
			startVideo();
		}

		@Override
		public void surfaceDestroyed(SurfaceHolder holder) {
			/*
			if(t == null){
			upd.running = false;
	    	while(true){
	    		try{
	    			t.join();
	    		}catch(InterruptedException e){
	    			e.printStackTrace();
	    		}break;
	    	}

		    t = null;
			}*/
		}
		

		
			

					

		private void encodeVideo() {

			long startTime;
			long estimatedTime;
			long waittime;
			double est;
			double est_frrate;
			double interval = 1/fps;

			//TODO deprecated methods
			Log.d(TAG,"framerate " + fps +" fps, limit " + timerLimit  + " frames, interval " +interval +"sec" );
			Display display = getWindowManager().getDefaultDisplay();
			width = display.getWidth();  // deprecated
			height = display.getHeight();  // deprecated
			if (height>width){
				Log.d(TAG, "portrait orinetation?" );
				height= display.getWidth();  // deprecated
				width = display.getHeight();  // deprecated

			}
			allgroups = null;
			allgroups = btmpass.getAllGroups();		    
			BitmapFactory.Options options = new BitmapFactory.Options();
			options.inPreferredConfig = Bitmap.Config.ARGB_8888;


			int inter= (int) Math.round(interval*1000);
			//Log.d(TAG, "inter frame time " + inter + " ms" );

			int limit = btmpass.longestLayer;
			boolean first_run = true;
			Bitmap bitmap;

			int canvas_ww=0;
			int canvas_hh=0;
			ImageView preview_pic=(ImageView)findViewById(R.id.preview_picture);
			preview_pic.setBackgroundColor(Color.parseColor("#00000000"));

			preview_pic.setImageBitmap(null);
			//Log.d(TAG, "bitmap image removed");
			preview_pic.setVisibility(View.VISIBLE);

			encoder = new VideoEncoder();




			for(int i=0;i<limit;i++){			
				int w =0;
				int h =0;

				Canvas frame = null;
				Bitmap cs = null;


				canvas_hh = height;
				canvas_ww = width;


				cs = Bitmap.createBitmap(canvas_ww, canvas_hh, Bitmap.Config.ARGB_8888); 
				frame = new Canvas(cs);

				for (Integer key : allgroups.keySet()){

					Log.d(TAG, " displaying group " + key + " image " + allgroups.get(key).get(i));
					//TODO static access
					bitmap = btmpass.getBitmapFromMemCache(allgroups.get(key).get(i));											
					if (bitmap == null) {
						Log.d(TAG, "CACHE MISS");
						bitmap=BitmapFactory.decodeFile(session+allgroups.get(key).get(i), options);			        
					}else{Log.d(TAG, "CACHE HIT");}
					w=bitmap.getWidth();
					h=bitmap.getHeight();
					Log.d(TAG, "w h " +w+"x" +h );		






					frame.drawBitmap(bitmap, (canvas_ww-w)/2, (canvas_hh-h)/2,  null); 

				}

				preview_pic.setImageBitmap(cs);
				int[] pixeldata=new int [canvas_ww*canvas_hh];
				cs.getPixels(pixeldata, 0, canvas_ww, 0, 0, canvas_ww, canvas_hh);
				if(i==0){
					Log.d(TAG,"initializing encoder");
					encoder.initialize(canvas_ww,canvas_hh,fps);
				}
				Log.d(TAG,"adding frame, index" + ii);
				encoder.addFrame(pixeldata);//canvas get pixel data
				Log.d(TAG,"frame added");
				pixeldata=null;
				frame=null; 
				cs=null;	 

				bitmap=null;	


				estimatedTime = System.nanoTime() - startTime;
				est = estimatedTime/1000000;
				waittime = (long)(inter-est);
				if(waittime>0){

					try {	 		
						Thread.sleep(waittime);
						//Thread.sleep(waittime*10);
					} catch (InterruptedException e) {
						return;
					}

				}else{
					est_frrate=1000/(est);
					//Log.d(TAG, "FRAMERATE: " + est_frrate  + " fps" +" wait " + waittime);
				}				
			}
			encoder.finalizeVid();

			preview_pic.setBackgroundColor(Color.parseColor("#00000000"));

			preview_pic.setImageBitmap(null);
			//Log.d(TAG, "bitmap image removed");
			preview_pic.setVisibility(View.GONE);


		}
		
		
		private void startVideo(){
			try {					
				mMediaPlayer.setDataSource(session+"temp.webm");
				Log.d(TAG,"video data source set:" +session+"temp.webm");
			} catch (IllegalArgumentException e) {
				Log.d(TAG,"mplayer exception: " + e);
				video_playing=false;
			} catch (SecurityException e) {
				Log.d(TAG,"mplayer exception: " + e);
				video_playing=false;
			} catch (IllegalStateException e) {
				Log.d(TAG,"mplayer exception: " + e);
				video_playing=false;
			} catch (IOException e) {
				Log.d(TAG,"mplayer exception: " + e);
				video_playing=false;
			}
	
			mMediaPlayer.setDisplay(sHolder);						            	
	        Log.d(TAG,"display set");
	        mMediaPlayer.setLooping(true);
	        Log.d(TAG,"looping set");
		
			try {
				
		        Log.d(TAG,"preparing_async");
				mMediaPlayer.prepareAsync();

			} catch (IllegalStateException e) {
				Log.d(TAG,"mplayer exception: " + e);
				video_playing=false;
			} //catch (IOException e) {
			//	Log.d(TAG,"mplayer exception: " + e);
			//	video_playing=false;
			//}
			//if(video_playing){
			//	video_ready=true;
			//	Log.d(TAG,"starting");
			//	mMediaPlayer.start();
			//	Log.d(TAG,"MEDIA PLAYER STARTED");
			//}
		}	
		
		
		final Runnable hide_ctrls = new Runnable() {
			   public void run() {
				   hide_controls();
			   }
			};

		final Runnable unhide_ctrls = new Runnable() {
				   public void run() {
					   unhide_controls();
				   }
				};
			
		private void hide_controls(){
			Log.d(TAG, "hiding buttons" );
			   photoButton.startAnimation(hanim); 
		       playButton.startAnimation(hanim); 
		       uploadButton.startAnimation(hanim);
		       settingsButton.startAnimation(hanim);
		       settingsButton.setOnClickListener(null);
		       uploadButton.setOnClickListener(null);
			   photoButton.setOnClickListener(null); 
		       playButton.setOnClickListener(null);
		}
		

		private void unhide_controls(){
			Log.d(TAG, "unhiding buttons" );
				uploadButton.startAnimation(uhanim);
				photoButton.startAnimation(uhanim); 
				playButton.startAnimation(uhanim); 
				settingsButton.startAnimation(uhanim); 
				settingsButton.setOnClickListener(uploadListener);
				uploadButton.setOnClickListener(uploadListener);
				photoButton.setOnClickListener(photoListener); 
			    playButton.setOnClickListener(playListener); 

		}


		@Override
		   public boolean onTouch(View arg0, MotionEvent event) {	    
			timerLimit=(int)Math.round(new_hide_time*fps);    		
			synchronized(timerlock){timer=0; }			
			Log.d(TAG, "reset timer ");
			return false;
		}
		
		public void onPrepared(MediaPlayer player) {
			Log.d(TAG,"prepared!!!!!!!!!");
		    player.start();
		    DisplaySequenceActivity.this.runOnUiThread(new Runnable() {
				    public void run() {
				    	
				    	  playButton.clearAnimation();
				    	  playButton.setOnClickListener(playListener);
				    	  playButton.setImageResource(R.drawable.ic_pause);
				    	  uploadButton.setOnClickListener(uploadListener);
						   	
				    }
			   	});
		}
	

		   @Override
		    public void onConfigurationChanged(Configuration newConfig) 
		    {
		        super.onConfigurationChanged(newConfig);
		    }
		   
		   private class TimerThread implements Runnable {
			   long startTime;
				long estimatedTime;
				long waittime;
				double est;
				double est_frrate;
				double interval = 1/fps;
			   public run(){

					while (running){							
								if(!paused){
									startTime = System.nanoTime();
									synchronized(timerlock){
										if(timer==0 && !first && hidden){
											handler.post(unhide_ctrls);
											hidden=false;
										}
										timer++;	
										if((timer>timerLimit)&&!hidden){
											handler.post(hide_ctrls);
											hidden=true;
											first=false;
										}
											
									}	
									
									
									
									 estimatedTime = System.nanoTime() - startTime;
									 est = estimatedTime/1000000;
									 waittime = (long)(inter-est);
									 if(waittime>0){
									 
										 	try {	 		
										 		Thread.sleep(waittime);
										 		//Thread.sleep(waittime*10);
										 	} catch (InterruptedException e) {
										 		return;
										 	}
										 	
									 }else{
										 	est_frrate=1000/(est);
											Log.d(TAG, "FRAMERATE: " + est_frrate  + " fps" +" wait " + waittime);
									 }
									 est_frrate=1000/(est);
									 Log.d(TAG, "FRAMERATE: " + est_frrate  + " fps" +" wait " + waittime);
									 
								}else{		//					
									try {
										synchronized(pauselock){			
											pauselock.wait();
											Log.d(TAG, "thread started");
										}							
									} catch (InterruptedException e1) {
										return;
									}
									
									
								}
								
						        ii++;
						        if(ii>=limit){
						        
						        	ii=0;
						        }
						        Log.d(TAG, "index " + ii);
							
						
					}
				
				   
			   }
		   }
}