package com.pencilation;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.text.SimpleDateFormat;
import java.util.Date;

import com.pencilation.DisplaySequenceActivity;
import com.pencilation.R;
import com.pencilation.RedRawView;


//import org.opencv.android.OpenCVLoader;





import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.ProgressDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.res.AssetManager;
import android.hardware.Camera;
import android.hardware.Camera.PictureCallback;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Environment;
import android.util.Log;
import android.view.KeyEvent;
import android.view.MotionEvent;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnTouchListener;
import android.view.WindowManager;
import android.widget.FrameLayout;
import android.widget.ImageButton;
import android.widget.Toast;



public class RedRawActivity extends Activity implements OnTouchListener, PictureCallback {

	private static final String TAG = "RedRaw Activity";
	public native void FindFrames(String s, String t, String u);
	private Camera mCamera;
	private RedRawView mPreview;

	private SurfaceView mSurfaceView = null;
	private SurfaceHolder mHolder;
	private static boolean nextPhoto = false;
	private static int shots =0;
//	private boolean finish = false;
		
	public String dirName;
	public String fileName;
	public String storage;
	
	private ImageButton playButton;
	private ImageButton photoButton;
	private ImageButton cancelButton;
	
    static {
            System.loadLibrary("find_frames");
            Log.i(TAG, "Native library loaded");
    }
    public RedRawActivity() {
        Log.i(TAG, "Instantiated new " + this.getClass());
    }
 
    /** Called when the activity is first created. */
    @Override
    public void onCreate(Bundle savedInstanceState) {
    	super.onCreate(savedInstanceState);
    	shots=0;

    	//open xmls and save to sd card for native access 
    	copyAssets();
    	Log.i(TAG, "ok assets copied ");
    	if (mCamera==null){
    	mCamera=getCameraInstance();
    	Log.i(TAG, "mCamera attached" );
    	}
    	     	
    	RedRawView mPreview = new RedRawView(this, mCamera);
    	setContentView(R.layout.redraw_surface_view);
    	
    	FrameLayout preview=(FrameLayout)findViewById(R.id.redraw_java_surface_view);
    	Log.i(TAG, "frame layout set " + this.getClass());
    	preview.addView(mPreview);
        mPreview.setOnTouchListener(this);
        
        playButton=(ImageButton)findViewById(R.id.play_button);
        photoButton=(ImageButton)findViewById(R.id.photo_button);
        cancelButton=(ImageButton)findViewById(R.id.cancel_button);
    	
        photoButton.setOnClickListener(new OnClickListener()
        {
            public void onClick(View v)
            {
            	shots++; 
                Log.i(TAG,"onTouch event " + shots);
                if(shots<=1){//to prevent "double click"
                       
                    try {
        				Thread.sleep(500);
        			} catch (InterruptedException e) {
        				// TODO Auto-generated catch block
        				e.printStackTrace();
        			} // LOCK is held
                    
                takePicture();
                //        mCamera.startPreview();
                }
            }
        }); 
        
        Log.i(TAG, "creating RedRaw directory " + this.getClass());
        File directory = new File(Environment.getExternalStorageDirectory()+File.separator+"Pencilation");
        directory.mkdirs();
    }
    
    @Override
    public void onBackPressed() {
            super.onBackPressed();
            this.finish();
    }
    
    @SuppressLint("NewApi")
	@Override
    public void onResume()
    {   super.onResume();
    	//if(finish){this.finish();}
    	Log.i(TAG, "onResume Called" );
    	if (mCamera==null){
    	mCamera = getCameraInstance();
    	Log.i(TAG, "mCamera attached again" );
    	}
 
    }
    @Override
    public void onPause()
    {
        super.onPause();
      /*  if (mCamera!= null)
            stopPreviewAndFreeCamera();*/
    }
    public void onDestroy() {
        super.onDestroy();
   /*     File image = new File(fileName);
        image.delete();
        File path =  new File("dirName");
        if( path.exists() ) {
            File[] files = path.listFiles();
            for(int i=0; i<files.length; i++) {
               if(!(files[i].isDirectory())) {
                  files[i].delete();
               }
            }
        }
        Log.i(TAG, "deleted " + fileName);
        Log.i(TAG, "deleted directory" + dirName);*/
        if (mCamera!= null){
            stopPreviewAndFreeCamera();
        }
        //SavePhotoTask.this.cancel(true);
    }


    @SuppressLint("SimpleDateFormat")
    @Override
    public boolean onTouch(View v, MotionEvent event) {

        return false;
    }
    
    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
      if (keyCode == KeyEvent.KEYCODE_CAMERA) {
      	shots++; 
        Log.i(TAG,"Camera Key down " + shots);
        if(shots<=1){//to prevent "double click"
           
            try {
				Thread.sleep(500);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} // LOCK is held
        
    
           
        takePicture();
     
        }
        
    	  return true; // do nothing on camera button
      }
      return super.onKeyDown(keyCode, event);
    }
   
    public void takePicture() {

    	
    	
      mCamera.takePicture(null,null,this);	
      Log.i(TAG,"take picture call DONE");	  
     
    }
    
    @Override
    public void onPictureTaken(byte[] data, Camera camera) {
    	Log.i(TAG, "CALLBACK");
        try { //async task for storing the photo
  		          new SavePhotoTask().execute(data, null, null);
  		          Log.i(TAG, "AsyncTask started");
  		        	
  	     } catch (final Exception e){
  		        	Log.i(TAG, "Cannot save" , e);
  		            //some exceptionhandling
  		 }finally{
        		nextPhoto = true;
     
   		}
        mCamera.startPreview();
	}
  		    
   
    
    class SavePhotoTask extends AsyncTask<byte[], Void, Void> {
        @SuppressLint("SimpleDateFormat")
        
        private String dirName;
        
        @Override
        protected void onPostExecute(Void result){
            Intent intent = new Intent(getBaseContext(), DisplaySequenceActivity.class);
            intent.putExtra("directory",dirName);
            intent.putExtra("image",fileName);
            intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
            startActivity(intent);
            finish();
        }
        
        @Override
        protected void onPreExecute(){
        	Toast.makeText(getBaseContext(),"processing... wait 20 sec.", 
                    Toast.LENGTH_LONG).show();
        /*
            Log.i(TAG, "showing dialog" + this.getClass());
        	ProgressDialog dialog = ProgressDialog.show(
                    getBaseContext(),
                    "Press BACK to cancel",
                    "Processing image",
                    true,
                    true,
                    new DialogInterface.OnCancelListener(){
                        @Override
                        public void onCancel(DialogInterface dialog) {
                            SavePhotoTask.this.cancel(true);
                        }
                    }
            );
        	  Log.i(TAG, "dialog showing");	
        	  */
        }
        
          
		@Override
        protected Void doInBackground(byte[]... jpeg) {
	        
            long startTime = System.nanoTime();    
            
        	   SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd_HH-mm-ss");
               String currentDateandTime = sdf.format(new Date());
               
               storage = Environment.getExternalStorageDirectory().getPath() + File.separator + "Pencilation" + File.separator;
               dirName =storage + "img_" + currentDateandTime;
               fileName =dirName + ".JPG";
                

               Log.i(TAG, "creating directory for single image " + this.getClass());
               File directory = new File(dirName);
               directory.mkdirs();

            Log.i(TAG, "saved " + fileName);
/*
          if (photo.exists()) {
            photo.delete();
          }
*/
          try {
             	FileOutputStream fos=new FileOutputStream(fileName);
    			fos.write(jpeg[0]);
    			fos.close();
          }
          catch (java.io.IOException e) {
            Log.e(TAG,"Exception in SavePhotoTask");
          }
          Log.d(TAG,"starting native part");
          FindFrames(fileName, dirName, storage);
          Log.d(TAG,"native finished, back in java");
          long estimatedTime = System.nanoTime() - startTime;
          Log.i(TAG,"picture processed in " + estimatedTime/1000000000 +"sec");	  
//start intent   
          return(null);
        }
    }

    public static Camera getCameraInstance(){
        Camera c = null;
        try {
            c = Camera.open(); // attempt to get a Camera instance
        }
        catch (Exception e){
        	Log.e(TAG, "CAN'T GET CAMERA");
            // Camera is not available (in use or does not exist)
        }
        return c; // returns null if camera is unavailable
    }
     
    private void stopPreviewAndFreeCamera() {
        if (mCamera != null) {
            mCamera.stopPreview();
            mCamera.release();
            mCamera = null;
        }
    }
    
    private void copyAssets() {
        AssetManager assetManager = getAssets();
        String[] files = null;
        try {
            files = assetManager.list("");
        } catch (IOException e) {
            Log.e(TAG, "Failed to get asset file list.", e);
        }
        for(String filename : files) {
            InputStream in = null;
            OutputStream out = null;
            try {
              in = assetManager.open(filename);
              File outFile = new File(Environment.getExternalStorageDirectory().getPath() + File.separator + "Pencilation" + File.separator, filename);
              out = new FileOutputStream(outFile);
              copyFile(in, out);
              in.close();
              in = null;
              out.flush();
              out.close();
              out = null;
            } catch(IOException e) {
                Log.i(TAG, "Failed to copy asset file: " + filename, e);
            }       
        }
    }
    private void copyFile(InputStream in, OutputStream out) throws IOException {
        byte[] buffer = new byte[1024];
        int read;
        while((read = in.read(buffer)) != -1){
          out.write(buffer, 0, read);
        }
    }
    
    
} 

