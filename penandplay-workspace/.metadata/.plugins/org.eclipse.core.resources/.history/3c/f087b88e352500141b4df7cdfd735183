package com.penandplay;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.Semaphore;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

import com.penandplay.DisplaySequenceActivity;
import com.penandplay.PhotoView;
import com.penandplay.BitmapManager;
import com.penandplay.R;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.Intent;
import android.content.res.AssetManager;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.hardware.Camera;
import android.hardware.Camera.AutoFocusCallback;
import android.hardware.Camera.PictureCallback;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Environment;
import android.util.Log;
import android.view.Display;
import android.view.KeyEvent;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnLongClickListener;
import android.view.View.OnTouchListener;
import android.view.animation.AnimationUtils;
import android.view.animation.RotateAnimation;
import android.widget.FrameLayout;
import android.widget.ImageButton;
import android.widget.ImageView;

//TODO focusing message (toast)
//TODO thread pool to stop photo processing tasks 
//TODO dont put ufinished series to btmp manager

public class PhotoActivity extends Activity implements OnTouchListener, PictureCallback {
	 public static String session = Environment.getExternalStorageDirectory().getPath() + File.separator + "Pen_and_play" + File.separator + "session" + File.separator;
	//	public static double fps = 12;

	private static final String TAG = "Photo Activity";
	public native void FindFrames(String s, String t, String u, boolean color, boolean cutBG, int width, int height, int target_width, int target_height,  boolean columns, boolean framenrs);
	private Camera mCamera;
	private PhotoView mPreview;
	private BitmapManager btmpass;
	private String this_batch;
	private ArrayList<Integer> this_batch_nrs;
	private final static Semaphore available = new Semaphore(1, true);
	private static Semaphore queueSemaphore = new Semaphore(-1, true);
	public static boolean keep_going = true;

	//private SurfaceView mSurfaceView = null;
	//private SurfaceHolder mHolder;
	private static boolean nextPhoto = false;
	private static boolean camera_processing = false;
	private static boolean global_frame_nrs = false;
	private static boolean stop_first_preview = false;
	private boolean play_waiting;

		
	public String dirName;
	public String fileName;
	public static String storage;
	private String session_str;
	
	private RotateAnimation ranim;
	
	private OnClickListener playListener;
	private OnClickListener photoListener;
	private AutoFocusCallback takePicture;
	private static ImageButton playButton;
	private static ImageButton photoButton;
	//private ImageButton cancelButton;
	//private static boolean done =false;
	private static boolean use_columns=false;
	private static boolean use_color=false;
	private static boolean use_framenrs=false;
	private File session_directory;
	private File old_session_directory;
	private int width;
	private int height;
	private boolean next_layer = false;
	private static boolean ok_to_playback=true;
	private static int total_shots=0;
	private static int shots = 0;
	private Object lock;
	public Canvas canvas;	
	private Paint paint;
 	private static LinkedBlockingQueue<String> photoQueue; 
 	private static ArrayList<String> photoQueueControl; 
 	private static Thread waitingForFirstPhoto;
	private static  Thread showingFirstPreview;
	private static Thread waitingForAllPics;
	public static int target_width;
	public static int target_height;
	private static ExecutorService executor; 
	public static int TIMEOUT;
	
	
    static {
            System.loadLibrary("find_frames");
            Log.d(TAG, "Native library loaded");
    }
    private PhotoActivity() {
    	
    }
  
      


 
 
    /** Called when the activity is first created. */
    @Override
    public void onCreate(Bundle savedInstanceState) {
    	super.onCreate(savedInstanceState);
    	//TODO use point.size for api > 13 
    	Display display = getWindowManager().getDefaultDisplay();
    	width = display.getWidth();  // deprecated
    	height = display.getHeight();  // deprecated
    	if (height>width){
    		Log.d(TAG, "portrait orinetation?" );
    		height= display.getWidth();  // deprecated
    		width = display.getHeight();  // deprecated	    		
    	}

    	paint= new Paint(Paint.FILTER_BITMAP_FLAG |
                Paint.DITHER_FLAG |
                Paint.ANTI_ALIAS_FLAG);
    	
    	this_batch= new String();
    	this_batch_nrs = new ArrayList<Integer>();
        storage = Environment.getExternalStorageDirectory().getPath() + File.separator + "Pen_and_play" + File.separator;

    	btmpass = BitmapManager.getInstance();
    	photoQueue = new LinkedBlockingQueue<String>();
    	photoQueueControl = new ArrayList<String>(); 
    	//btmpass.createCache();
    	btmpass.width=width;
    	btmpass.height=height;
    	lock = new Object();
    	
    	 
        
        executor = Executors.newFixedThreadPool(1);
    	/* mDecodeThreadPool = new ThreadPoolExecutor(Runtime.getRuntime().availableProcessors(),
    			 									Runtime.getRuntime().availableProcessors(),
    			 									TIMEOUT,
    			 									TimeUnit.SECONDS,*/


    	//open xmls and save to sd card for native access 
    	copyAssets();    	    
    	
    	final PhotoView mPreview = new PhotoView(this);
    	setContentView(R.layout.photo_surface_view);
    	
    	FrameLayout preview=(FrameLayout)findViewById(R.id.photo_surface_view);
    	Log.d(TAG, "frame layout set " + this.getClass());
    	preview.addView(mPreview);
        //mPreview.setOnTouchListener(this);
    

        playButton=(ImageButton)findViewById(R.id.play_button);
        photoButton=(ImageButton)findViewById(R.id.photo_button);
       // cancelButton=(ImageButton)findViewById(R.id.cancel_button);
        ranim = (RotateAnimation)AnimationUtils.loadAnimation(getBaseContext(), R.anim.rotate);

        //create the directory structure and move old session 	
        File directory = new File(Environment.getExternalStorageDirectory()+File.separator+"Pen_and_play");
        directory.mkdirs();        
        session_directory = new File(Environment.getExternalStorageDirectory()+File.separator+"Pen_and_play"+File.separator+"session"+File.separator);
        old_session_directory = new File(Environment.getExternalStorageDirectory()+File.separator+"Pen_and_play"+File.separator+"session.old"+File.separator);
        deleteDirectory(old_session_directory);
        session_directory.renameTo(old_session_directory);	
        session_directory.mkdirs();        
        session_str=session_directory.toString();
        
        playListener = new OnClickListener(){
            public void onClick(View v)
            {   
            	if(available.hasQueuedThreads()||available.availablePermits()==0){
            		disablePlay();                  
            	}            	
            	Waiter waiter = new Waiter();
            	waitingForAllPics = new Thread(waiter);
            	waitingForAllPics.start();
            }
        };    
         
        
        photoListener = new OnClickListener(){
            public void onClick(View v)
            {  Log.d(TAG,"photo click event ");
          		playButton.setOnClickListener(null);
          		photoButton.setOnClickListener(null);
          		photoButton.setImageResource(R.drawable.ic_running);
          		photoButton.setAnimation(ranim);
               mPreview.mCamera.autoFocus(takePicture);               
                //        mCamera.startPreview();
            }
        };
        
        photoButton.setOnClickListener(photoListener); 
        
        photoButton.setOnLongClickListener(new OnLongClickListener()
        {		//TODO submenu
            public boolean onLongClick(View v)
            {           	
				return true;
            }
        }); 
        
        takePicture = new AutoFocusCallback(){

      	  @Override
      	  public void onAutoFocus(boolean arg0, Camera arg1) {
      		 playButton.setOnClickListener(null);
      		 photoButton.setOnClickListener(null);
      		 camera_processing = true;
      		  shoot(mPreview.mCamera);	     	  }
      	  };
 
    }
    
    private void disablePlay(){
    	play_waiting = true;
    	playButton.setImageResource(R.drawable.ic_running);
    	playButton.startAnimation(ranim);
		photoButton.setOnClickListener(null);
		playButton.setOnClickListener(null);
		Log.d(TAG,"play button disabled");

    }
    
    public  void enablePlay(){
    	play_waiting = false;
       	playButton.setOnClickListener(playListener);
      	photoButton.setOnClickListener(photoListener);
      	playButton.clearAnimation();
      	playButton.setImageResource(R.drawable.ic_play);
      		
    }

    private class Waiter implements Runnable{
      public void run(){
       	if(available.hasQueuedThreads()||available.availablePermits()==0){

	    	Log.d(TAG,"play button waiting");
	    	synchronized(lock){
	    		try {
					lock.wait();
				} catch (InterruptedException e) {
					Log.d(TAG,"play button interrupted, returning");
					return;
				}
	    	}
       	}    	
    	if(!stop_first_preview){    	
	    	Intent intent = new Intent(getBaseContext(), DisplaySequenceActivity.class);
	    	if(shots!=0){//if some shots were taken
	    		String batch=Integer.valueOf(total_shots).toString(); 
	    		intent.putExtra("this_batch",batch );
	    		Log.d(TAG,"finalizing group " +batch +", layers "+this_batch_nrs);	
	    		if(!global_frame_nrs){
	    			 btmpass.finalize(this_batch_nrs);
	    		}else{
	    			 btmpass.reorderBitmaps(this_batch_nrs);
	    		}
	    		Log.d(TAG,"back from reordering");	
	    	}
	    	stop_first_preview=true;
	    	waitingForFirstPhoto.interrupt();
	    	showingFirstPreview.interrupt();
	    	intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);    	
	    	startActivityForResult(intent,2);
	    }else{return;}
      }
    }
    
    protected void onSaveInstanceState(Bundle state) {
    	  super.onSaveInstanceState(state);

    }
    
    @Override
    public void onBackPressed() {
            //super.onBackPressed();
            if(!stop_first_preview){
            	Log.d(TAG, "reseting activity!!!!!!!!!!");
         	    ok_to_playback=false;
         	    stop_first_preview=true;
       			if(waitingForFirstPhoto!=null){
       				waitingForFirstPhoto.interrupt();}
       			if(showingFirstPreview!=null){
       				showingFirstPreview.interrupt();}
       			if(waitingForAllPics!=null){
       				waitingForAllPics.interrupt();
       				try {
       				   Log.d(TAG, "waiting to end threads");	
       				   ok_to_playback=false;       				   
       				   stop_first_preview=true;
       				   waitingForFirstPhoto.join();
       				   showingFirstPreview.join();
       				   waitingForAllPics.join();
       				   ok_to_playback=true;
       				   stop_first_preview=false;
       				   Log.d(TAG, "all joined, ok to playback next round");
					} catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
       			}
            	resetActivity();           	
            }else{
            	Log.d(TAG, "finishing activity!!!!!!!!!!!!!");
            	finish();
            }
            
    }
    
    @SuppressLint("NewApi")
	@Override
    public void onResume()
    {   super.onResume();
    }
    @Override
    public void onPause()
    {
        super.onPause();
    }
    public void onDestroy() {
        super.onDestroy();

    }
    @Override
    public boolean onTouch(View v, MotionEvent event) {
        return false;
    }
    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
      if (keyCode == KeyEvent.KEYCODE_CAMERA) {
    	if(!camera_processing){  
	        Log.d(TAG,"Camera Key down ");
	        mPreview.mCamera.autoFocus(takePicture);  
	        return true; // consume event
	      	}
      	}
      	return super.onKeyDown(keyCode, event);
    }

    public void shoot(Camera c){
    	  c.takePicture(null,null,this);	
    }    		      
    		      
    
    @Override
    public void onPictureTaken(byte[] data, Camera camera) {    	
        try { //async task for storing the photo        			
	        	  total_shots++;
  		          new SavePhotoTask().execute(data, null, null);
  		          Log.d(TAG, "AsyncTask started");
  		        	
  	     } catch (final Exception e){
  		        	Log.d(TAG, "Cannot save" , e);
  		            //some exceptionhandling
  		 }finally{
        		nextPhoto = true;
     
   		}
        camera.startPreview(); 		
 		camera_processing = false;
	}
  		    
   
    
    class SavePhotoTask extends AsyncTask<byte[], Void, Void> {
        @SuppressLint("SimpleDateFormat")
        
        private String dirName;
        private String fileName;
        private Integer total;

        
        @Override
        protected void onPreExecute(){      
        	shots++;
        
        	total = new Integer(total_shots);
        	dirName =storage +"session"+File.separator + total_shots+ File.separator;        

            File directory = new File(dirName);
            directory.mkdirs();
            File orig_directory = new File(dirName+File.separator+"orig"+File.separator);
            orig_directory.mkdirs();
            fileName =dirName  +"source.JPG";    
        }
        
          
		@Override
        protected Void doInBackground(byte[]... jpeg) {

          try {
             	FileOutputStream fos=new FileOutputStream(fileName);
    			fos.write(jpeg[0]);
    			fos.close();
          }
          catch (java.io.IOException e) {
            Log.e(TAG,"Exception in SavePhotoTask");
          }

 
          return(null);
        }
		
        
        @Override
        protected void onPostExecute(Void result){  	
        	 ProcessPhotos proc = new ProcessPhotos(total,dirName,fileName,shots);  
             Thread t = new Thread(proc);
             Future future= executor.submit(t);//TODO PARAMETER
        	
      		photoButton.setOnClickListener(photoListener);
      		photoButton.setImageResource(R.drawable.ic_photo);
      		photoButton.clearAnimation();
        	
      		playButton.setImageResource(R.drawable.ic_play);
      		playButton.setOnClickListener(playListener);
      		
        }
    }

    private void stopPreviewAndFreeCamera() {
        if (mPreview.mCamera != null) {
        	mPreview.mCamera.stopPreview();
        	mPreview.mCamera.release();
        	mPreview.mCamera = null;
        }
    }
  
    private void copyAssets() {
        AssetManager assetManager = getAssets();
        String[] files = null;
        try {
            files = assetManager.list("");
        } catch (IOException e) {
            Log.e(TAG, "Failed to get asset file list.", e);
        }
        for(String filename : files) {
            InputStream in = null;
            OutputStream out = null;
	        try {     
	              in = assetManager.open(filename);
	              File outFile = new File(storage,filename);
	              out = new FileOutputStream(outFile);
	              copyFile(in, out);
	              in.close();
	              in = null;
	              out.flush();
	              out.close();
	              out = null;
	              Log.d(TAG, "copying"+ filename + " to  " + storage);
	        } catch(IOException e) {
	              // Log.d(TAG, "Failed to copy asset file: " + filename, e);
	        }                   
        }
    }
    private void copyFile(InputStream in, OutputStream out) throws IOException {
        byte[] buffer = new byte[1024];
        int read;
        while((read = in.read(buffer)) != -1){
          out.write(buffer, 0, read);
        }
    }
    
   private boolean deleteDirectory(File directory) {
        if(directory.exists()){
            File[] files = directory.listFiles();
            if(null!=files){
                for(int i=0; i<files.length; i++) {
                    if(files[i].isDirectory()) {
                        deleteDirectory(files[i]);
                    }
                    else {
                        files[i].delete();
                    }
                }
            }
        }
        return(directory.delete());
    }
    

   @Override
   protected void onActivityResult(int requestCode, int resultCode, Intent intent) {
	   resetActivity();
  
	   if (requestCode==2){	 // gets the previously created intent
		   shots = 0;
		   String next_l = "NOPE";
			try{next_l = intent.getStringExtra("nextlayer");}
			catch(NullPointerException e){
				Log.d(TAG, "null result" );

			}
			Log.d(TAG, "got string" );
			Log.d(TAG, "string: " + next_l );
			
			
		 if(next_l.equals("OPAQUE")){
		 	Log.d(TAG, "opaque" );
		
		 	next_layer=false;
		 }else if (next_l.equals("CUTOUT")){
		 	Log.d(TAG, "cutout" );
		
		 	next_layer=true;
		 }else if(next_l.equals("QUIT")){
			 	Log.d(TAG, "quit form child" );
				
			 	finish();
		 }
		 else {
			 Log.d(TAG, "no extra string from display sequence " );
		 }			
	  }
   }
   
   private void resetActivity(){

    	
	   keep_going=false;	
	   photoQueue = new LinkedBlockingQueue<String>();
	   photoQueueControl = new ArrayList<String>();
	   this_batch_nrs = new ArrayList<Integer>();
	   queueSemaphore = new Semaphore(-1, true);
	   executor.shutdownNow();
	   
	   keep_going=false;
	   
	   PhotoActivity.this.runOnUiThread(new Runnable() {
		   public void run() {
	    		
			   ImageView preview_pic=(ImageView)findViewById(R.id.preview_picture);
			   preview_pic.setBackgroundColor(Color.parseColor("#00000000"));
			   Log.d(TAG, "background transparen ");				   
			   preview_pic.setImageBitmap(null);
			   Log.d(TAG, "bitmap image removed");
	    }
	   });
	   enablePlay();
   }
   
   private class WaitForFirstPhoto implements Runnable {	   
	   private String directory;
	   public WaitForFirstPhoto(String dir){		   
		   directory=dir;
	   }
	 
	   public void run(){
		  // boolean first_photo = false;
		   File parentDir = new File(directory);
		  boolean first_pic=true;
		   while(!stop_first_preview){
			   if(parentDir.exists()){			  	 
	  		       File[] files = parentDir.listFiles();
	  		  	       if(null!=files){ 	  	
	  		             for(int i=0; i<files.length; i++) {	              			                   	
	  		                    if(!files[i].isDirectory()){   		  		                    	
	  		                 		if(files[i].getName().endsWith(".png")){		  		                 			
	  		                 			String filename=directory+files[i].getName();	
	  		                 			if(photoQueue.isEmpty()&&first_pic){	
	  		                 				first_pic=false;//TODO doesnt really work
		  		                    		try {
		  		                    			Log.d(TAG, "putting FIRST image " + filename + " to the queue");
												photoQueue.put(filename);
												photoQueueControl.add(filename);
												queueSemaphore.release();
											} catch (InterruptedException e) {
												return;
											}
		  		                    		
		  		                    		Log.d(TAG, "notified previewLock");
		  		                    	}else{//TODO check if its a new file  
		  		                    		if(!photoQueueControl.contains(filename)){
		  		                    			try {
		  		                    				Log.d(TAG, "putting image " + filename + " to the queue");
													photoQueue.put(filename);
													photoQueueControl.add(filename);
													queueSemaphore.release();
												} catch (InterruptedException e) {
													
													return;
												}
		  		                    		}
		  		                    		
		  		                    	}                 			   
	  		                   		}	  		                 		
	  		                    }
	  		             }	  		         
	  		       }
	  		  }		  
			  try {
				   Thread.sleep(50);
			  } catch (InterruptedException e) {			
				return;
			  }
			  
		   }		   
		   
	   }
	   
   }
   
   private class ProcessPhotos implements Runnable {
	   
	   private Integer total;
	   private String fileName;
	   private String dirName;
	   private int shot;       
	      
	   public  ProcessPhotos(Integer group, String dir, String file, int shots){
		   total = group;
		   dirName =dir;
		   fileName =file;    
		   shot = shots;
	   }
	   
	   public void run(){
	          Log.d(TAG,"thread " + total +" waiting");          

		   	  try {
				available.acquire();
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		      Log.d(TAG,"thread " + total +" going ahead, permits "+available.availablePermits());   
		      
	          long startTime = System.nanoTime();    
	          Log.d(TAG,"starting native part");       
	
			   Log.d(TAG, shots +" shots");

	          if(shots==1){
	        	  WaitForFirstPhoto waiting = new WaitForFirstPhoto(dirName);
	        	  waitingForFirstPhoto = new Thread(waiting);
	        	  waitingForFirstPhoto.start();
	        	  ShowFirstPreview show = new ShowFirstPreview();
	        	  showingFirstPreview = new Thread(show);
	        	  showingFirstPreview.start();
	        	  
	        	  FindFrames(fileName, dirName, storage, use_color, next_layer, width, height, 0, 0, use_columns, use_framenrs);
	          }else{
	        	  FindFrames(fileName, dirName, storage, use_color, next_layer, width, height, target_width, target_height, use_columns, use_framenrs);
	          }	          
	          
	          File parentDir = new File(dirName);
	 	   
	 		  HashMap<Integer,String> numbered_btms = new HashMap<Integer,String>();
	 		  
	  		  if(parentDir.exists()){
	  		       File[] files = parentDir.listFiles();
	  		       if(null!=files){ 
	  	
	  		             for(int i=0; i<files.length; i++) {
	              			    //Log.d(TAG,"checking "+ files[i].getName());
	  		                	
	  		                    if(files[i].isDirectory()) {
	  		                    }
	  		                    else {
	  		                    	String filename = files[i].getName();
	  		                    	
	  		                 		if(filename.endsWith(".png")){
	  		                 			   String newname= filename.replace(".png", "");	  		                 			
	  		                 			   String[] parts = newname.split("-");
	  		                 			   for(String s : parts){  		                 			   
	  		                 				   int nr=Integer.parseInt(s);	  		                 				                    		   
		  		                    		   numbered_btms.put(Integer.valueOf(nr),total+ File.separator+files[i].getName());
	  		                 			   }                      			   
	  		                   		}               
	  		                    }
	  		             }	  		         
	  		       }
	  		  } 		  
	     	  
	     	  btmpass.numbered_bitmaps.put(total, numbered_btms);
	     	  if(!global_frame_nrs){
	     		  if(shot==1){
	     			  btmpass.initialize(total);
	     		  }else{
	     			 btmpass.add_batch(total);
	     		  }
	     		  
	     	  }
	 		  this_batch_nrs.add(total);
	  		  
	          long estimatedTime = System.nanoTime() - startTime;
	  		  Log.d(TAG,"bitmaps processed in " + estimatedTime/1000000000 +"sec");	
	  		
	  		 if(!available.hasQueuedThreads()){			
				 Log.d(TAG,"notifying to start displaying sequence  ");   
				 synchronized(lock){
            		lock.notify();             	
            	}
	  		  }	
	  		  available.release();
	  		  
	  		 
	   }
   }
    
   private class ShowFirstPreview implements Runnable{
	   public ShowFirstPreview(){		   
	   }
	   public void run(){
		
		   while(!stop_first_preview){
			   try {
				queueSemaphore.acquire();
			} catch (InterruptedException e1) {
				return;
			}
			   Log.d(TAG, "showing first preview!!!!!");
			   if((available.hasQueuedThreads()||available.availablePermits()==0)&&play_waiting){
		   
			   PhotoActivity.this.runOnUiThread(new Runnable() {
				    public void run() {//TODO doesnt really work, because of the gui thread?
				    	   photoButton.setOnClickListener(null); 	
						   ImageView preview_pic=(ImageView)findViewById(R.id.preview_picture);
						   preview_pic.setBackgroundColor(Color.parseColor("#000000"));		

						   BitmapFactory.Options options = new BitmapFactory.Options();
						   options.inPreferredConfig = Bitmap.Config.ARGB_8888;
						   Bitmap bitmap;
						   try{
							   String s=null;
							   //long startTime = System.nanoTime(); 
								s = photoQueue.take();
								//long estimatedTime = System.nanoTime() - startTime;
						  		//Log.d(TAG,"WAITED IN UI THREAD " + estimatedTime/1000000000 +"sec");	
								bitmap=BitmapFactory.decodeFile(s, options);		
								preview_pic.setImageBitmap(bitmap);
								//Thread.sleep(500)
							} catch (InterruptedException e) {
								//return;
							}
							try {
								Thread.sleep(250);
							} catch (InterruptedException e) {
								//return;
							}
							bitmap=null;
						   
				    }
			   	});
		   }
		   }		   
	   }
   } 

}