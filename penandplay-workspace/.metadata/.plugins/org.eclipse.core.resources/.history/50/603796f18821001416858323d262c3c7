package com.penandplay;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;

import com.penandplay.DisplaySequenceActivity;
import com.penandplay.PhotoView;
import com.penandplay.BitmapManager;
import com.penandplay.R;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.Intent;
import android.content.res.AssetManager;

import android.hardware.Camera;
import android.hardware.Camera.AutoFocusCallback;
import android.hardware.Camera.PictureCallback;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Environment;
import android.util.Log;
import android.view.Display;
import android.view.KeyEvent;
import android.view.MotionEvent;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnLongClickListener;
import android.view.View.OnTouchListener;
import android.view.animation.AnimationUtils;
import android.view.animation.RotateAnimation;
import android.widget.FrameLayout;
import android.widget.ImageButton;



//TODO focusing message (toast)
public class PhotoActivity extends Activity implements OnTouchListener, PictureCallback {

	private static final String TAG = "Photo Activity";
	public native void FindFrames(String s, String t, String u, boolean color, boolean cutBG, int width, int height, boolean columns, boolean framenrs);
	private Camera mCamera;
	private PhotoView mPreview;
	private BitmapManager btmpass;
	private String this_batch;
	private ArrayList<Integer> this_batch_nrs;
	


	private SurfaceView mSurfaceView = null;
	private SurfaceHolder mHolder;
	private static boolean nextPhoto = false;
	private static boolean camera_processing = false;
	private static boolean global_frame_nrs = true;

		
	public String dirName;
	public String fileName;
	public static String storage;
	private String session_str;
	
	private RotateAnimation ranim;
	
	private OnClickListener playListener;
	private OnClickListener photoListener;
	private AutoFocusCallback takePicture;
	private ImageButton playButton;
	private ImageButton photoButton;
	//private ImageButton cancelButton;
	private static int  nr_tasks =0;
	private static boolean done =false;
	private static boolean use_columns=false;
	private static boolean use_color=true;
	private static boolean use_framenrs=false;
	private static Object nr_tasks_lock;
	private File session_directory;
	private File old_session_directory;
	private int width;
	private int height;
	private boolean next_layer = false;
	private static int total_shots=0;
	private static int shots = 0;
	
	
	
    static {
            System.loadLibrary("find_frames");
            Log.d(TAG, "Native library loaded");
    }
    public PhotoActivity() {

    }
 
 
    /** Called when the activity is first created. */
    @Override
    public void onCreate(Bundle savedInstanceState) {
    	super.onCreate(savedInstanceState);

    	Display display = getWindowManager().getDefaultDisplay();

    	width = display.getWidth();  // deprecated
    	height = display.getHeight();  // deprecated
    	if (height>width){
    		Log.d(TAG, "portrait orinetation?" );
    		height= display.getWidth();  // deprecated
    		width = display.getHeight();  // deprecated
	    		
    	}

    	this_batch= new String();
    	this_batch_nrs = new ArrayList<Integer>();
        storage = Environment.getExternalStorageDirectory().getPath() + File.separator + "Pen_and_play" + File.separator;

    	btmpass = BitmapManager.getInstance();
    	btmpass.width=width;
    	btmpass.height=height;
    	nr_tasks_lock = new Object();

    	//open xmls and save to sd card for native access 
    	copyAssets();
    	Log.d(TAG, "ok assets copied ");
    
    	
    	final PhotoView mPreview = new PhotoView(this);
    	setContentView(R.layout.photo_surface_view);
    	
    	FrameLayout preview=(FrameLayout)findViewById(R.id.photo_surface_view);
    	Log.d(TAG, "frame layout set " + this.getClass());
    	preview.addView(mPreview);
        //mPreview.setOnTouchListener(this);
    

        playButton=(ImageButton)findViewById(R.id.play_button);
        photoButton=(ImageButton)findViewById(R.id.photo_button);
       // cancelButton=(ImageButton)findViewById(R.id.cancel_button);
        ranim = (RotateAnimation)AnimationUtils.loadAnimation(getBaseContext(), R.anim.rotate);

        Log.d(TAG, "creating Pen and play directory " + this.getClass());
        File directory = new File(Environment.getExternalStorageDirectory()+File.separator+"Pen_and_play");
        directory.mkdirs();

        
        session_directory = new File(Environment.getExternalStorageDirectory()+File.separator+"Pen_and_play"+File.separator+"session"+File.separator);
        old_session_directory = new File(Environment.getExternalStorageDirectory()+File.separator+"Pen_and_play"+File.separator+"session.old"+File.separator);
        deleteDirectory(old_session_directory);
        session_directory.renameTo(old_session_directory);	
        session_directory.mkdirs();
        
        session_str=session_directory.toString();
        
        playListener = new OnClickListener(){
            public void onClick(View v)
            {   Log.d(TAG,"play pressed ");
           //TODO pass bitmap array       
            	playButton.setOnClickListener(null);
              	playButton.setImageResource(R.drawable.ic_running);
            	playButton.setAnimation(ranim);
            
            	Intent intent = new Intent(getBaseContext(), DisplaySequenceActivity.class);
            	if(!(shots==0)){
            		String batch=Integer.valueOf(total_shots).toString(); 
            		intent.putExtra("this_batch",batch );
            		Log.d(TAG,"telling to reorder group" +batch +" layers "+this_batch_nrs);	
            		if(!global_frame_nrs){
            			btmpass.finalize(this_batch_nrs);
            		}else{
            			btmpass.ReorderBitmaps(this_batch_nrs);
            		}
            		Log.d(TAG,"back from reordering");	
            		this_batch_nrs = new ArrayList<Integer>();
            	//intent.putExtra("image",fileName);
            	}
            	intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
            	startActivityForResult(intent,2);
            	//finish();
            }
        };
        
        

        photoListener = new OnClickListener(){
            public void onClick(View v)
            {  Log.d(TAG,"photo click event ");
               mPreview.mCamera.autoFocus(takePicture);               
                //        mCamera.startPreview();
            }
        };
        
        photoButton.setOnClickListener(photoListener); 
        
        photoButton.setOnLongClickListener(new OnLongClickListener()
        {		//TODO submenu
            public boolean onLongClick(View v)
            {           	
				return true;
            }
        }); 
        
        takePicture = new AutoFocusCallback(){

      	  @Override
      	  public void onAutoFocus(boolean arg0, Camera arg1) {
      		 playButton.setOnClickListener(null);
      		 photoButton.setOnClickListener(null);
      		 camera_processing = true;
      		  shoot(mPreview.mCamera);	     	  }
      	  };
 
    }
    
    protected void onSaveInstanceState(Bundle state) {
    	  super.onSaveInstanceState(state);
   /* 	  state.putInt("nr_tasks", nr_tasks);
    	  state.putBoolean("done", done);
          Log.d(TAG, "saved state" );*/
    }
    
    @Override
    public void onBackPressed() {
            super.onBackPressed();
            finish();
    }
    
    @SuppressLint("NewApi")
	@Override
    public void onResume()
    {   super.onResume();

    	Log.d(TAG, "onResume Called" );

 
    }
    @Override
    public void onPause()
    {
    	
        super.onPause();

    	Log.d(TAG, "paused" );
    }
    public void onDestroy() {
        super.onDestroy();

        Log.d(TAG, "DESTROYED");

    }


    @SuppressLint("SimpleDateFormat")
    @Override
    public boolean onTouch(View v, MotionEvent event) {
        return false;
    }
    
    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
      if (keyCode == KeyEvent.KEYCODE_CAMERA) {
    	if(!camera_processing){  
	        Log.d(TAG,"Camera Key down ");
	        try {
					Thread.sleep(100);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} // LOCK is held          
	        	mPreview.mCamera.autoFocus(takePicture);  
	            return true; // do nothing on camera button
	      	}
      	}
      	return super.onKeyDown(keyCode, event);
    }
   
    


    public void shoot(Camera c){
    	  Log.d(TAG,"shooting");
    	  c.takePicture(null,null,this);	
	      Log.d(TAG,"take picture call DONE");	
    }    		      
    		      
    
    @Override
    public void onPictureTaken(byte[] data, Camera camera) {
    	Log.d(TAG, "CALLBACK");
    	
        try { //async task for storing the photo
        			
	        		total_shots++;
  		          new SavePhotoTask().execute(data, null, null);
  		          Log.d(TAG, "AsyncTask started");
  		        	
  	     } catch (final Exception e){
  		        	Log.d(TAG, "Cannot save" , e);
  		            //some exceptionhandling
  		 }finally{
        		nextPhoto = true;
     
   		}
        camera.startPreview();
        playButton.setOnClickListener(playListener);
 		photoButton.setOnClickListener(photoListener);
 		camera_processing = false;
	}
  		    
   
    
    class SavePhotoTask extends AsyncTask<byte[], Void, Void> {
        @SuppressLint("SimpleDateFormat")
        
        private String dirName;
        
        @Override
        protected void onPostExecute(Void result){        	
        	synchronized(nr_tasks_lock){
        		if(nr_tasks==1){        	
        
        		}
          		Log.d(TAG, "thread "+nr_tasks+ " exiting" );
        		nr_tasks--;               		
        	}    
        }
        
        @Override
        protected void onPreExecute(){      
        	shots++;
        	synchronized(nr_tasks_lock){
        		nr_tasks++;    
        		playButton.setOnClickListener(null);        		
        		Log.d(TAG, "thread "+nr_tasks +" starting" );      		
        	}
        }
        
          
		@Override
        protected Void doInBackground(byte[]... jpeg) {
		
            long startTime = System.nanoTime();    
            
        	   SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd_HH-mm-ss");
               String currentDateandTime = sdf.format(new Date());
               
               
               //dirName =storage +"session"+File.separator+ "img_" + currentDateandTime + System.currentTimeMillis();
               dirName =storage +"session"+File.separator + total_shots+ File.separator;
               fileName =dirName  +"source.JPG";
                

               Log.d(TAG, "creating directory for single image " + this.getClass());
               File directory = new File(dirName);
               directory.mkdirs();
               File orig_directory = new File(dirName+File.separator+"orig"+File.separator);
               orig_directory.mkdirs();

               Log.d(TAG, "saved " + fileName);

          try {
             	FileOutputStream fos=new FileOutputStream(fileName);
    			fos.write(jpeg[0]);
    			fos.close();
          }
          catch (java.io.IOException e) {
            Log.e(TAG,"Exception in SavePhotoTask");
          }
          Log.d(TAG,"starting native part");
          
          FindFrames(fileName, dirName, storage, use_color, next_layer, width, height, use_columns, use_framenrs);
          
          Log.d(TAG,"native finished, back in java");
          long estimatedTime = System.nanoTime() - startTime;
          Log.d(TAG,"picture processed in " + estimatedTime/1000000000 +"sec, filling bitmap");	
          
          File parentDir = new File(dirName);
          ArrayList<File> all_files=new ArrayList<File>();
 	   
 		  HashMap<Integer,String> numbered_btms = new HashMap<Integer,String>();
 		  
  		  if(parentDir.exists()){
  		       Log.d(TAG, parentDir +" exists");
  		       File[] files = parentDir.listFiles();
  		       Log.d(TAG, files.length+" files listed " );
  		       if(null!=files){ 
  	
  		             for(int i=0; i<files.length; i++) {
              			    Log.d(TAG,"checking "+ files[i].getName());
  		                	
  		                    if(files[i].isDirectory()) {
  		                    }
  		                    else {
  		                    	String filename = files[i].getName();
  		                    	Log.d(TAG,"parsing "+ filename);
  		                 		if(filename.endsWith(".png")){
  		                 			   String newname= filename.replace(".png", "");
  		                 			   Log.d(TAG,"chopped to "+ newname); 	
  		                 			   String[] parts = newname.split("-");
  		                 			   for(String s : parts){  		                 			   
  		                 				   int nr=Integer.parseInt(s);
  		                 				   Log.d(TAG,"number parsed as "+ nr);
  		                 				   Log.d(TAG,"file to pass: KEY - " + Integer.valueOf(nr) + "VALUE: img_" + total_shots+ File.separator+files[i].getName());	  		                    		   
	  		                    		   numbered_btms.put(Integer.valueOf(nr),total_shots+ File.separator+files[i].getName());
  		                 			   }                 			
  		                    			   
  		                   		}
  		                 		
  		                  
  		                    }
  		             }
  		         
  		       }
  		  }
     	  Integer total = new Integer(total_shots);
     	  btmpass.numbered_bitmaps.put(total, numbered_btms);
     	  if(!global_frame_nrs){
     		  if(shots==1){
     			  btmpass.initialize(total);
     		  }else{
     			 btmpass.add_batch(total);
     		  }
     		  
     	  }
     	  else{
     		  
     	  }
 		  this_batch_nrs.add(total);
  		  
  		  estimatedTime = System.nanoTime() - startTime;
  		  Log.d(TAG,"bitmaps processed in " + estimatedTime/1000000000 +"sec");	
          return(null);
        }
    }

    private void stopPreviewAndFreeCamera() {
        if (mPreview.mCamera != null) {
        	mPreview.mCamera.stopPreview();
        	mPreview.mCamera.release();
        	mPreview.mCamera = null;
        }
    }
  
    private void copyAssets() {
        AssetManager assetManager = getAssets();
        String[] files = null;
        try {
            files = assetManager.list("");
        } catch (IOException e) {
            Log.e(TAG, "Failed to get asset file list.", e);
        }
        for(String filename : files) {
            InputStream in = null;
            OutputStream out = null;
	            try {            
              
	              in = assetManager.open(filename);
	              File outFile = new File(storage,filename);
	              out = new FileOutputStream(outFile);
	              copyFile(in, out);
	              in.close();
	              in = null;
	              out.flush();
	              out.close();
	              out = null;
	              Log.d(TAG, "copying"+ filename + " to  " + storage);
	            } catch(IOException e) {
	               Log.d(TAG, "Failed to copy asset file: " + filename, e);
	            }
                   
        }
    }
    private void copyFile(InputStream in, OutputStream out) throws IOException {
        byte[] buffer = new byte[1024];
        int read;
        while((read = in.read(buffer)) != -1){
          out.write(buffer, 0, read);
        }
    }
    
   private boolean deleteDirectory(File directory) {
        if(directory.exists()){
            File[] files = directory.listFiles();
            if(null!=files){
                for(int i=0; i<files.length; i++) {
                    if(files[i].isDirectory()) {
                        deleteDirectory(files[i]);
                    }
                    else {
                        files[i].delete();
                    }
                }
            }
        }
        Log.d(TAG,"deleting ");

        return(directory.delete());
    }
    

   @Override
   protected void onActivityResult(int requestCode, int resultCode, Intent intent) {
	   if (requestCode==2){
	 // gets the previously created intent
		   shots = 0;
		   String next_l = "NOPE";
			try{next_l = intent.getStringExtra("nextlayer");}
			catch(NullPointerException e){
				Log.d(TAG, "null result" );

			}
			Log.d(TAG, "got string" );
			Log.d(TAG, "string: " + next_l );
			
			
		 if(next_l.equals("OPAQUE")){
		 	Log.d(TAG, "opaque" );
		
		 	next_layer=false;
		 }else if (next_l.equals("CUTOUT")){
		 	Log.d(TAG, "cutout" );
		
		 	next_layer=true;
		 }else if(next_l.equals("QUIT")){
			 	Log.d(TAG, "quit form child" );
				
			 	finish();
			 }
		 else {
			 Log.d(TAG, "NOPE " );
		 }
		 

			
	  }
   }
    
} 

