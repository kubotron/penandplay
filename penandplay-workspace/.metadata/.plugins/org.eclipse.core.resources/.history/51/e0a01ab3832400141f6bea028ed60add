package com.penandplay;

import java.io.IOException;

import android.content.Context;
import android.hardware.Camera;
import android.util.Log;
import android.view.SurfaceHolder;
import android.view.SurfaceView;

public class PhotoView extends SurfaceView implements SurfaceHolder.Callback {
	
  private static final String TAG = "PhotoView";
 // public SurfaceView mSurfaceView;
  public SurfaceHolder mHolder;
  public Camera mCamera;
 
  
  public PhotoView(Context context) {
	      super(context);
	   	 // mCamera = camera;
	        // Install a SurfaceHolder.Callback so we get notified when the
	        // underlying surface is created and destroyed.
	        mHolder = getHolder();
	        mHolder.addCallback(this);
	    	mHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);
      
  }


  public Camera getCamera(){
		if (mCamera==null){
	    	mCamera=getCameraInstance();
	    	}
	  return mCamera;
  } 
  
  
  
  public void surfaceCreated(SurfaceHolder holder) {
	  Log.i(TAG, "surface created" );

	  
		if (mCamera==null){
	    	mCamera=getCameraInstance();
	    	}
	    	
      // The Surface has been created, now tell the camera where to draw the preview.
      try {
          mCamera.setPreviewDisplay(holder);
          
          Camera.Parameters params = mCamera.getParameters();
          params.setFocusMode("continuous-picture");
          mCamera.setParameters(params);
          mCamera.startPreview();
          
      } catch (IOException e) {
          Log.d(TAG, "Error setting camera preview: " + e.getMessage());
      }
  }

  public void surfaceDestroyed(SurfaceHolder holder) {
      Log.i(TAG, "SURFACE DESTROYED");
      if (mCamera!= null){
          stopPreviewAndFreeCamera();
      }
      // empty. Take care of releasing the Camera preview in your activity.
  }

  public void surfaceChanged(SurfaceHolder holder, int format, int w, int h) {
      // If your preview can change or rotate, take care of those events here.
      // Make sure to stop the preview before resizing or reformatting it.
	  Log.i(TAG, "Surface Changed");
      if (mHolder.getSurface() == null){
        // preview surface does not exist
        return;
      }

      // stop preview before making changes
      try {
          mCamera.stopPreview();
      } catch (Exception e){
        // ignore: tried to stop a non-existent preview
      }

      // set preview size and make any resize, rotate or
      // reformatting changes here

      // start preview with new settings
      try {
          mCamera.setPreviewDisplay(mHolder);
          mCamera.startPreview();

      } catch (Exception e){
          Log.d(TAG, "Error starting camera preview: " + e.getMessage());
      }
  }
  
  private void stopPreviewAndFreeCamera() {
      if (mCamera != null) {
          mCamera.stopPreview();
          mCamera.release();
          mCamera = null;
      }
  }
  
  public static Camera getCameraInstance(){
      Camera c = null;
      try {
          c = Camera.open(); // attempt to get a Camera instance
      }
      catch (Exception e){
      	Log.e(TAG, "CAN'T GET CAMERA");
          // Camera is not available (in use or does not exist)
      }
      return c; // returns null if camera is unavailable
  }
}
  
  

