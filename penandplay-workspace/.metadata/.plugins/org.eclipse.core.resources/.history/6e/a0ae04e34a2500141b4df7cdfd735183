package com.penandplay;

import java.io.File;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.concurrent.Callable;
import android.annotation.SuppressLint;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.Environment;
import android.util.Log;
import com.google.libvpx.LibVpxEnc;
import com.google.libvpx.LibVpxEncConfig;
import com.google.libvpx.LibVpxException;
import com.google.libvpx.Rational;
import com.google.libvpx.VpxCodecCxPkt;
import com.google.libwebm.mkvmuxer.MkvWriter;
import com.google.libwebm.mkvmuxer.Segment;
import com.google.libwebm.mkvmuxer.SegmentInfo;

public class VideoEncoder implements Callable {
	
	private static final String TAG = "VideoEncoder";
	private File[] files;
	private String session_dir = Environment.getExternalStorageDirectory()
			+ File.separator + "Pen_and_play" + File.separator + "session"
			+ File.separator;

	VideoEncoder(BitmapManager btmpass) {
		//files = ordered_files;

	}

	@SuppressLint({ "SimpleDateFormat"})
	public String call() {
		Log.i(TAG, "encoding");
		ArrayList<Bitmap> bitmapArray = new ArrayList<Bitmap>();
		StringBuilder error = new StringBuilder();
		int w=0; int h=0;
		
		long startTime = System.nanoTime();

		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd_HH-mm-ss");
		String currentDateandTime = sdf.format(new Date());
		String vidName = session_dir + "vid_" + currentDateandTime
				+ System.currentTimeMillis() + ".webm";
		int nrframes =0;
		for (File file : files) {
			nrframes++;
			String filename = session_dir + file.getName();
			Bitmap fullSize = BitmapFactory.decodeFile(filename);
			Bitmap bitmap = Bitmap.createScaledBitmap (fullSize,430,260, true);//TODO correct values
			bitmapArray.add(bitmap);
			w =bitmap.getWidth();
			h = bitmap.getHeight();
			//TODO chcek if all the same size
		}
		
		Log.i(TAG, "width " + w + ", height "+ h);
		ArrayList<int[]> allpix= new ArrayList<int[]>() ;
		int i =0;
		for (Bitmap bmp :bitmapArray) {		
				//TODO set config to 8888				
				 int[] pix = new int[w*h];		
				 bmp.getPixels (pix, 0, w, 0, 0, w, h); 
				 i++;
				 allpix.add(pix);
		}

		boolean success = encodeIntRgbFrame(vidName,allpix, nrframes, LibVpxEnc.FOURCC_ARGB, w, h, 12,
				1, 24,  error); 
		
		if (!success){Log.i(TAG, "error " + error);}
		else{Log.i(TAG, "success ");}
		
		Log.d(TAG, "native finished, back in java");
		long estimatedTime = System.nanoTime() - startTime;
		double time = estimatedTime / 1000000000;
		Log.i(TAG, "video encoded in " + time + "sec");
		// start intent
		return vidName;

	}

	
	

	/*
	 * This function will encode an int array to a video WebM file.
	 * |webmOutputName| filename of the WebM file to write to. |srcFrame| is
	 * source frame to convert and encode multiple times. |fourcc| LibVpxEnc
	 * fourcc of the source. |width| width of the source. |height| height of the
	 * source. |rate| fps numerator of the output WebM. |scale| fps denominator
	 * of the output WebM. |framesToEncode| is the number of video frames to
	 * encode before stopping. Returns true on success. If there is an error,
	 * |error| will be set to a descriptive string.
	 */
	static public boolean encodeIntRgbFrame(String webmOutputName,
			ArrayList<int[]> srcFrame, int nrframes, long fourcc, int width, int height, int rate,
			int scale, int framesToEncode, StringBuilder error) {
		LibVpxEncConfig encoderConfig = null;
		LibVpxEnc encoder = null;
		MkvWriter mkvWriter = null;
		try {
			encoderConfig = new LibVpxEncConfig(width, height);
			encoder = new LibVpxEnc(encoderConfig);

			// libwebm expects nanosecond units
			encoderConfig.setTimebase(1, 1000000000);
			Rational timeBase = encoderConfig.getTimebase();
			Rational frameRate = new Rational(rate, scale);
			Rational timeMultiplier = timeBase.multiply(frameRate).reciprocal();
			int framesIn = 1;
			
			mkvWriter = new MkvWriter();
			if (!mkvWriter.open(webmOutputName)) {
				error.append("WebM Output name is invalid or error while opening.");
				return false;
			}
			Segment muxerSegment = new Segment();
			if (!muxerSegment.init(mkvWriter)) {
				error.append("Could not initialize muxer segment.");
				return false;
			}
			SegmentInfo muxerSegmentInfo = muxerSegment.getSegmentInfo();
			muxerSegmentInfo.setWritingApp("Pen_and_Play output");
			
			long newVideoTrackNumber = muxerSegment.addVideoTrack(width,height, 0);
			if (newVideoTrackNumber == 0) {
				error.append("Could not add video track.");
				return false;
			}
			
			while (framesIn < framesToEncode) {
				long frameStart = timeMultiplier.multiply(framesIn - 1).toLong();
				long nextFrameStart = timeMultiplier.multiply(framesIn).toLong();	
																									//duration		
				ArrayList<VpxCodecCxPkt> encPkt = encoder.convertIntEncodeFrame(srcFrame.get((framesIn-1)%nrframes), frameStart,nextFrameStart - frameStart, fourcc);
				for (int i = 0; i < encPkt.size(); i++) {
					VpxCodecCxPkt pkt = encPkt.get(i);
					final boolean isKey = (pkt.flags & 0x1) == 1;
					if (!muxerSegment.addFrame(pkt.buffer, newVideoTrackNumber,
							pkt.pts, isKey)) {
						error.append("Could not add frame.");
						return false;
					}
				}
				++framesIn;
			}
			if (!muxerSegment.finalizeSegment()) {
				error.append("Finalization of segment failed.");
				return false;
			}
		} catch (LibVpxException e) {
			error.append("Encoder error : " + e);
			return false;
		} finally {
			if (encoder != null) {
				encoder.close();
			}
			if (encoderConfig != null) {
				encoderConfig.close();
			}
			if (mkvWriter != null) {
				mkvWriter.close();
			}
		}
		return true;
	}


}
